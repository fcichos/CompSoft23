{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Animations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Animations are sometimes a nice feature, if you want to have a look at how your calculations evolve over time. Especially in the case of our particle based simulations it seems useful to diplay the position of the particles over time.\n",
    "\n",
    "There are multiple ways to animate plots and images in python. Not all of them are always transferable between computers. Matplotlib for example provides a `animate` function, which can also use the `ffmpeg` video compressor. But that requires installation of all of them on the specific system you are working on. \n",
    "\n",
    "We want to use the `ipycanvas` module, because it delivers easy drawing of shapes like circles or rectangle in a canvas directly in our Jupyter Notebooks. Have a look at the ([documentation](https://readthedocs.org/projects/ipycanvas/downloads/pdf/latest/)). The module provides even tools to interact with a mouse."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Import Modules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Before we start, lets have a look at the modules we import this time. Except the NumPy modules we never used them before. We import `time`, `threading`, and `ipycanvas`.\n",
    "\n",
    "~~~\n",
    "import numpy as np\n",
    "from time import sleep,time\n",
    "from threading import Thread\n",
    "\n",
    "from ipycanvas import MultiCanvas, hold_canvas,Canvas\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    },
    "tags": []
   },
   "source": [
    "\n",
    "The `time` module is python standard module, which contains timing-related functions like the `sleep` and `time` function for example. \n",
    "\n",
    "* The function suspends execution of the current thread for a given number of seconds.\n",
    "* The `time()` function returns the number of seconds passed since epoch. For Unix system, `January 1, 1970, 00:00:00` at UTC is epoch (the point where time begins).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The `threading` module is a module which allows you to specify how the processes in your notebook are executed. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The `ipycanvas` module is the one which helps us to draw the objects of our simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following lines test if the notebook is running in google colab and install/enable ipycanvas there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "  import google.colab\n",
    "  !pip install ipycanvas \n",
    "  from google.colab import output\n",
    "  output.enable_custom_widget_manager()\n",
    "  IN_COLAB=True\n",
    "except:\n",
    "  IN_COLAB = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from time import sleep,time\n",
    "from threading import Thread\n",
    "\n",
    "from ipycanvas import MultiCanvas, hold_canvas,Canvas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Particle class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We start by using out colloidal particle class, which we developed in the last section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "# Class definition\n",
    "class Colloid:\n",
    "\n",
    "    # A class variable, counting the number of Colloids\n",
    "    number = 0\n",
    "    f = 2.2e-19 # this is k_B T/(6 pi eta) in m^3/s\n",
    "\n",
    "    # constructor\n",
    "    def __init__(self,R, x0=0, y0=0):        \n",
    "        # add initialisation code here\n",
    "        self.R=R        \n",
    "        self.x=[x0]\n",
    "        self.y=[y0]\n",
    "        Colloid.number=Colloid.number+1\n",
    "        self.index=Colloid.number \n",
    "        self.D=Colloid.f/self.R        \n",
    "        \n",
    "    def get_D(self):        \n",
    "        return(self.D)\n",
    "    \n",
    "    def sim_trajectory(self,N,dt):        \n",
    "        for i in range(N):\n",
    "            self.update(dt)\n",
    "    \n",
    "    def update(self,dt):                   \n",
    "        self.x.append(self.x[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n",
    "        self.y.append(self.y[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n",
    "        return(self.x[-1],self.y[-1])\n",
    "        \n",
    "    def get_trajectory(self):\n",
    "        return(pd.DataFrame({'x':self.x,'y':self.y}))\n",
    "    \n",
    "    # class method accessing a class variable\n",
    "    @classmethod\n",
    "    def how_many(cls):\n",
    "        return(Colloid.number)\n",
    "    \n",
    "    # insert something that prints the particle position in a formatted way when printing\n",
    "    def __str__(self):\n",
    "        return(\"I'm a particle with radius R={0:0.3e} at x={1:0.3e},y={2:0.3e}.\".format(self.R, self.x[-1], self.y[-1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Create a set of particles "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We want to animate the Brownian motion of many particles. The best is therefore to create a `list` which contains all the individual `Colloid` objects. We start by creating 200 colloids at the position `(0,0)` to see how the spread from the origin. They are stored in the list `p`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "# number of particles\n",
    "N=200\n",
    "\n",
    "p=[]\n",
    "for _ in range(N):\n",
    "    p.append(Colloid(20*1e-6,0,0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Canvas and drawing function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Next, we need  a canvas, in which we draw our particles and we need the drawing function. \n",
    "\n",
    "The canvas is created by the `Canvas()` constructor if `ipycanvas`. The `display` command displays the canvas below the the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9c8f48372db84362bdc6213423496bea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(height=300, width=300)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "canvas = Canvas(width=300, height=300)\n",
    "display(canvas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![particles](img/particles.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "We realize the drawing in a `for` loop, which is first updating all particle positions and then drawing all the particles. \n",
    "\n",
    "The loop contains one interesting statement, which is the `with hold_canvas(canvas):`. Its useful to know that this statement halts the execution of all subsequent drawing comments in the following code block to create a \"batch\" of drawing commands send at one to the `ipycanvas` module. This will allow fast drawing of the whole scene.  All the rest of the commands are shortly explained in the loop comments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "scale=1e7 # this is to scale up all from Âµm to pixels\n",
    "for _ in range(1000):\n",
    "    for i in range(N):\n",
    "        p[i].update(0.18)\n",
    "        \n",
    "    with hold_canvas(canvas):\n",
    "        canvas.clear() # clear the canvas before drawing\n",
    "        canvas.fill_style = 'red' # fill color for the particles\n",
    "        canvas.global_alpha = 0.5 # make the slightly transparent\n",
    "        for i in range(N): # loop over all particles\n",
    "            # draw a filled circle for each particle\n",
    "            canvas.fill_arc(p[i].x[-1]*scale+150, p[i].y[-1]*scale+150, 5, 0, 2*np.pi) \n",
    "        sleep(0.03) # wait 10 ms before drawing the next timestep"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Talk about the with statement next time**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Threading for animation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "It is useful to start a simulation as a background process, which is running while you keep calculating in your Jupyter notebook. This can be achieved by setting up a thread. \n",
    "\n",
    "A computer program is a collection of instructions. A process is the execution of those instructions. A thread is a subset of the process. A process can have one or more threads. The `Thread` function of the `threading` module can start a process in background, such that your Jupyter notbook is not blocked for the specific time the process is executed. We will talk about how to use this module later in this section.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "\n",
    "To setup such a background process you first need to setup a function that should be executed as a thread. This is the updating and drawing of the colloidal particles. \n",
    "The `Thread()` function of the `threading` module is setting up everything for you and assigning that to the variable `simulation`. The `target=draw` statement thereby points the thread to take the right function. Once you start the thread with `simulation.start()` the function draw is executed in background until its finished. \n",
    "\n",
    "~~~\n",
    "def draw():\n",
    "    # do your drawing code here\n",
    "\n",
    "simulation = Thread(target=draw)  \n",
    "\n",
    "simulation.start()\n",
    "~~~\n",
    "\n",
    "That's all you need. So lets wrap all our drawing before into a draw function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "def draw():\n",
    "    for _ in range(1000):\n",
    "        for i in range(N):\n",
    "            p[i].update(0.18)\n",
    "\n",
    "        with hold_canvas(canvas):\n",
    "            canvas.clear() # clear the canvas before drawing\n",
    "            canvas.fill_style = 'red' # fill color for the particles\n",
    "            canvas.global_alpha = 0.5 # make the slightly transparent\n",
    "            for i in range(N): # loop over all particles\n",
    "                # draw a filled circle for each particle\n",
    "                canvas.fill_arc(p[i].x[-1]*scale+150, p[i].y[-1]*scale+150, p[i].R*1e6, 0, 2*np.pi) \n",
    "            sleep(0.03) # wait 10 ms before drawing the next timestep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "simulation = Thread(target=draw)  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We create a new canvas here, even though we could use the one on the top. It's just nice to not have to scroll up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8569082e784f4bb1ac95f05b5076f60c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(height=300, width=300)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "canvas = Canvas(width=300, height=300)\n",
    "display(canvas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "\n",
    "![particles](img/particles.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "# start the simulation\n",
    "simulation.start() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "One of the intruiging things of this type of threading is that all of the parameters of the Colloids may still be changed on the fly while the process is running. So lets just reset the particle positions to the origin and see what is happening in the canvas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "for i in range(N):\n",
    "    p[i].x=[0]\n",
    "    p[i].y=[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Now that we have a nice way of simulating particle motion you can extend that a bit. Here are three additions you may want to make:\n",
    "\n",
    "1) **Introduce boundary conditions:** This is a different way of keeping the particles inside the simulation box. They are just reflected by a boundary.\n",
    "\n",
    "2) **Introduce a drift velocity:** Particles may not only move diffusively but also with a constant drift velocity in a certain direction. We want to introduce that feature to tackle a COVID-19 spreading.\n",
    "\n",
    "3) **Introduce collisions:** To study the spreading of an infection, we have to introduce collisions between particles."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "07f435ee8fad4f8d855f32b41bf37c22": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasManagerModel",
      "state": {
       "_model_module_version": "^0.13",
       "_view_module": null,
       "_view_module_version": ""
      }
     },
     "59fb18d5644249429594722eff2517bd": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasModel",
      "state": {
       "_canvas_manager": "IPY_MODEL_07f435ee8fad4f8d855f32b41bf37c22",
       "_model_module_version": "^0.13",
       "_view_module_version": "^0.13",
       "height": 300,
       "layout": "IPY_MODEL_63ff105c22794123ab4b62dea1072bc4",
       "width": 300
      }
     },
     "63ff105c22794123ab4b62dea1072bc4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7fd29942aa3b405f94a4fa6afb3a948e": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasModel",
      "state": {
       "_canvas_manager": "IPY_MODEL_07f435ee8fad4f8d855f32b41bf37c22",
       "_model_module_version": "^0.13",
       "_view_module_version": "^0.13",
       "height": 300,
       "layout": "IPY_MODEL_9b8ce9d63e6c4e93889ef9c23c690c36",
       "width": 300
      }
     },
     "8569082e784f4bb1ac95f05b5076f60c": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasModel",
      "state": {
       "_canvas_manager": "IPY_MODEL_07f435ee8fad4f8d855f32b41bf37c22",
       "_model_module_version": "^0.13",
       "_view_module_version": "^0.13",
       "height": 300,
       "layout": "IPY_MODEL_a02fc34193e046ccb34c6490ad152429",
       "width": 300
      }
     },
     "9b8ce9d63e6c4e93889ef9c23c690c36": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9c1eb42492ea4dcc97180b3d16e728d0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9c8f48372db84362bdc6213423496bea": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasModel",
      "state": {
       "_canvas_manager": "IPY_MODEL_07f435ee8fad4f8d855f32b41bf37c22",
       "_model_module_version": "^0.13",
       "_view_module_version": "^0.13",
       "height": 300,
       "layout": "IPY_MODEL_9c1eb42492ea4dcc97180b3d16e728d0",
       "width": 300
      }
     },
     "a02fc34193e046ccb34c6490ad152429": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b0069eb65382476d9978c8d3ec322802": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "eebfb591816747758bb71486c29ee992": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasModel",
      "state": {
       "_canvas_manager": "IPY_MODEL_07f435ee8fad4f8d855f32b41bf37c22",
       "_model_module_version": "^0.13",
       "_view_module_version": "^0.13",
       "height": 300,
       "layout": "IPY_MODEL_b0069eb65382476d9978c8d3ec322802",
       "width": 300
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
