{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Machine Learning and Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We are close to the end of the course and covered different applications of Python to physical problems. The course is not intended to teach the physics, but exercise the application of Python. One field, which is increasingly important also in physics is the field of machine learning. Machine learning is the summarizing term for a number of computational procedures to extract useful information from data. We would like to spend the rest of the course to introduce you into a tiny part of machine learning. We will do that in a way that you calculate as much as possible in pure Python without any additional packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.constants import *  \n",
    "from scipy.sparse import diags\n",
    "from scipy.fftpack import fft,ifft\n",
    "from scipy import sparse as sparse\n",
    "from scipy.sparse import linalg as ln\n",
    "from time import sleep,time\n",
    "import matplotlib.patches as patches\n",
    "from ipycanvas import MultiCanvas, hold_canvas,Canvas\n",
    "\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "# default values for plotting\n",
    "plt.rcParams.update({'font.size': 16,\n",
    "                     'axes.titlesize': 18,\n",
    "                     'axes.labelsize': 16,\n",
    "                     'axes.labelpad': 14,\n",
    "                     'lines.linewidth': 1,\n",
    "                     'lines.markersize': 10,\n",
    "                     'xtick.labelsize' : 16,\n",
    "                     'ytick.labelsize' : 16,\n",
    "                     'xtick.top' : True,\n",
    "                     'xtick.direction' : 'in',\n",
    "                     'ytick.right' : True,\n",
    "                     'ytick.direction' : 'in',}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Machine learning has its origins long time ago and many of the currently very popular approaches have been developed in the past century. Two things have been stimmulating the current hype of machine learning techniques. One is the computational power that is available already at the level of your smartphone. The second one is the availability of data. Machine learning is divided into different areas, which are denotes as \n",
    "\n",
    "- supervised learning: telling the system what is right or wrong\n",
    "- semi-supervised learning: having only sparse information on what is right or wrong\n",
    "- unsupervised learning: let the system figure out what is right or wrong\n",
    "\n",
    "The graphics below gives a small summary. In our course, we cannot cover all methods. We will focus on **Reinforcement Learning** and **Neural Networks** just to show you, how things could look in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![](ml_overview.png)\n",
    "\n",
    "Image taken from F. Cichos et al. Nature Machine Intelligence (2020)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Reinforcement Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Reinforcement learning is learning what to do—how to map situations to actions—so as to maximize a numerical reward signal. The learner or agent is not told which actions to take, as in most forms of machine learning, but instead must discover which actions yield the most reward by trying them. In the most interesting and challenging cases, actions may affect not only the immediate reward but also the next situation and, through that, all subsequent rewards. These two characteristics—trial-and-error search and delayed reward—are the two most important distinguishing features of reinforcement learning."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "It has been around since the 1950s but gained momentum only in 2013 with the demonstrations of DeepMind on how to learn play Atari games like pong. The graphic below shows some of its applications in the field of robotics and gaming.\n",
    "\n",
    "![overview_rl](overview_RL.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Markov Decision Process"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The key element of reinforcement learning is the so-called Markov Decision Process. The Markov decision process (MDP) denotes a formalism of planning actions in the face of uncertainty. A MDP consist formally of \n",
    "\n",
    "- $S$: a set of accessible states in the world\n",
    "- $D$: an initial distribution to be in a state\n",
    "- $P_{sa}$: transition probability between states\n",
    "- $A$: A set of possible actions to take in each state\n",
    "- $\\gamma$: the discount factor, which is a number between 0 and 1\n",
    "- $R$: A reward function "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "We begin in an initial state $s_{i,j}$ drawn from the distribution $D$. At each time step $t$, we then have to pick an action, for example $a_1(t)$ , as a result of which our state transitions to some state  $s_{i,j+1}$. The states do not nessecarily correspond to spatial positions, however, as we talk about the gridworld later we may use this example to understand the procedures.\n",
    "\n",
    "![gw_with_path](gw_with_path.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "By repeatedly picking actions, we traverse some sequence of states"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "s_{0,0}\\rightarrow s_{0,1}\\rightarrow s_{1,1}+\\ldots\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Our total reward is then the sum of discounted rewards along this sequence of states"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "R(s_{0,0})+\\gamma R(s_{0,1})+ \\gamma^2 R(s_{1,1})+ \\ldots\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Here, the discount factor $\\gamma$, which is typically strictly less than one, causes rewards obtained immediately to be more valuable than those obtained in the future. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "In reinforcement learning, our goal is to find a way of choosing actions $a_0$,$a_1, \\ldots$ over time, so as to maximize the expected value of the rewards. The sequence of actions that realizes the maximum reward is called the optimal policy $\\pi^{*}$. A sequence of actions in general is called a policy $\\pi$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "#### Methods or RL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "There are different methods available to find the optimal policy. If we know the transition probabilities $P_{sa}$ the methods are called model-based algorithms. The so-called value interation procedure would be one of those methods, which we, however, do not consider.\n",
    "\n",
    "If we don't know the transition probabilities, then its model-free RL. We will have a look at one of those mode-free algorithms, which is Q‐learning."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "In Q-learning, the value of an action in a state is measured by its Q-value. The expectation value $E$ of the rewards with and initial state and action for a given policy is the Q-function or Q-value. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "Q^{\\pi}(s,a)=E[R(s_{0},a_{0})+\\gamma R(s_{1},a_{1})+ \\gamma^2 R(s_{2},a_{2})+ \\ldots | s_{0}=s,a_{0}=a,a_{t}=\\pi(s_{t})]\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "This sounds complicated but is in principle easy. There is  a Q-value for all actions of each state. Thus if we have 4 actions an 25 states, we have to store in total 100 Q-values. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    " For the optimal sequence of actions - for the best way to go - this Q value becomes a maximum."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "Q^{*}(s,a)=\\max_{\\pi}Q^{\\pi}(s,a)\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The policy which gives the sequence of actions to be carried out to get the maximum reward is then calculated by"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "$$\n",
    "\\pi^{*}(s)={\\rm argmax_{a}}Q^{*}(s,a)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The **Q-learning** algorithm is now an iterative procedure of updating the Q-value of each state and action which converges to the optimal policy $\\pi^{*}$. It is given by"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "Q_{t+\\Delta t}(s,a)  = Q_t(s,a) + \\alpha\\big[R(s) + \\gamma \\max_{a'}Q_t(s',a')-Q_t(s,a)\\big]\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "This states, that the current Q-value of the current state $s$ and the taken action $a$ for the next step is calculated from its current value $Q_t(s,a)$ plus an update value. This update value is calculated by multiplying the so-called learing rate $\\alpha$ with the reward $R$ obtained when taking the action plus a discounted value (discounted by $\\gamma$) when taking the best action in the next state $\\gamma \\max_{a'}Q_t(s',a')$. This is the procedure we would like to explore in a small Python program, which is not too difficult."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Navigating a Grid World\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "For our Python course we will have a look at the standard problem of reinforcement learning, which is the navigation in a grid world. \n",
    "Each of the grid cells below represents a state $s$ in which an object could reside. In each of these states, the object can take several actions. If it may step to left, right, up or down, there are 4 actions, which we may call $a_{1},a_{2},a_{3}$ and $a_{4}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "This image below shows our gridworld, with 25 states, where the shaded state is the goal state where we want the agent to go to independent of its intial state. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![gridworld](gridworld.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "In each of these state, we have 4 possible action as depicted below\n",
    "\n",
    "\n",
    "![actions](state_n_action.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Initialize Reinforcement Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "At first we would like to initialize our problem. We have as depicted above 25 states, where one state is the goal state. We would like to use 4 actions to move between the states so our Q-value matrix has 100 entries. We would like to give a penalty of $R=-1$ for all states except for the goal state where we give a reward of $R=10$.\n",
    "\n",
    "Our agent shall learn with a learning rate of $\\alpha=0.5$ and we will discount future rewards with $\\gamma=0.5$. \n",
    "\n",
    "There is one tiny detail, which is useful to understand. If we run into a certain strategy and this is not the optimal strategy, it is difficult for the algorithm to choose a different action. Therefore the so called $\\epsilon$-greedy factor is introduced. It tells you at which fraction of events in a state a random action is to be chosen over the action with the larges Q-value. We will set this $\\epsilon$-greedy value to 0.2, meaning that 20% of the actions are chosen randomly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "n_actions=4\n",
    "n_rows=n_columns=5\n",
    "\n",
    "Q=np.random.rand(n_rows,n_columns,n_actions)\n",
    "R=-1*np.ones([n_rows,n_columns])\n",
    "R[n_rows-1,n_columns-1]=10\n",
    "\n",
    "e_greedy=0.2\n",
    "alpha=0.5\n",
    "gamma=0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### List of actions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The actions, which we can take in each state are defined by 2-d vectors here which increase either the row or the column index in our gridworld. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "acl=np.array([[1,0],[0,1],[-1,0],[0,-1]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Initial state"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We chose the initial state from which we start randomly. We also initialize a list, where we register the sum of all Q-values. This is helpful to monitor the convergence of our algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "curr_state=np.random.randint([n_rows,n_columns])\n",
    "curr_state\n",
    "ep=0\n",
    "qsum=[]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Reinforcement Learning Loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The cell below is all you need for the learning how to navigate the grid world."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "for i in range(10000):\n",
    "        \n",
    "    if np.random.randn()>e_greedy:\n",
    "        action=np.argmax(Q[curr_state[0],curr_state[1],:])\n",
    "    else:\n",
    "        action=np.random.randint(4)\n",
    "        \n",
    "    next_state=curr_state+acl[action]\n",
    "    \n",
    "    if np.all(next_state<=n_rows-1) and np.all(next_state>=0): ## normal states\n",
    "        next_action=np.argmax(Q[next_state[0],next_state[1],:])\n",
    "        next_Q=Q[next_state[0],next_state[1],next_action]\n",
    "        Q[curr_state[0],curr_state[1],action]=Q[curr_state[0],curr_state[1],action]+alpha*(R[curr_state[0],curr_state[1]]+gamma*next_Q-Q[curr_state[0],curr_state[1],action])\n",
    "        if np.all(next_state==n_rows-1): ## the goal state, episode ends\n",
    "            next_state=np.random.randint([n_rows,n_columns])\n",
    "            ep+=1\n",
    "    else:        \n",
    "        Q[curr_state[0],curr_state[1],action]=Q[curr_state[0],curr_state[1],action]+alpha*(-100-Q[curr_state[0],curr_state[1],action]);        \n",
    "        next_state=np.random.randint([n_rows,n_columns])\n",
    "        ep+=1\n",
    "    qsum.append(np.sum(Q))    \n",
    "        \n",
    "    #curr_action=next_action\n",
    "    curr_state=next_state\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Convergence of the Q-learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The convergence of our learning is best judged from the sum of all Q-values in the matrix. This should converge to a negative value as most of the time our agent is getting the penalty $R=-1$ and only sparsely $R=10$ at the goal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 456,
       "width": 658
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(qsum)\n",
    "plt.xlabel('transition')\n",
    "plt.ylabel(r'$\\sum Q$')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Policy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The policy is obtained by taking the best actions with the larges Q-value from our Q-matrix.\n",
    "\n",
    "$$\n",
    "\\pi^{*}(s)={\\rm argmax_{a}}Q^{*}(s,a)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "policy=np.argmax(Q[:,:,:],axis=2)\n",
    "policy[n_rows-1,n_columns-1]=-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Plot the policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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APxnqZTkL3zhC2lsSx360Y9+FJs3b46RkZEolUrx7/7dv4vt27dHX19fXHnlldHY2Jj1iDX3la98JSYnJz14zBE5Jw/kHFYmOYelS6Uk//Zv/3Ya21KHKpVKjI2NxcjISKxevTq2bNkSx44di5dffjna2tri+uuvj927d0ehUMh61Jq5++67sx6Bi0zOyQM5h5VJzmHpHLfmgl1++eXR3t4e5XI5hoeHY3BwMNatWxeFQiGOHj0aP/7xj6NQKERfX19cd911sW7duqxHhiWTc/JAzgFASaZG1q1bF1dccUVcfvnlMTo6GuVyOd5888148803o6OjIw4fPhwHDx6M733ve3HVVVdFX19fbN++fUUe32PlknPyQM4ByLtUSvIbb7wRxWIxja2pcw0NDbF58+bYvHlznD59Og4dOhTDw8Px0ksvRVNT0/zxvVdffTVaW1vjuuuui76+vti6dWs0NDRkPX5VXnvttZiZmYmmpqbYsWNH1uOQATknD+QcVgY5h6VLpST/3u/9XgwNDaWxNcvI6tWro6enJ3p6emJycnL++N7BgwejtbU1CoVCHDt2LH7yk59EV1dX9PX1xfXXXx/r16/PevT39ZGPfCQGBwejp6cnSqVS1uOQMTknD+Qcli85h6Vz3JqLorW1NS6//PK47LLL4ujRo1Eul+Ptt9+ON998MzZt2hSFQiHK5XJ8//vfjyuuuCL6+vpi586d0dQkoiwfck4eyDkAK51/sS5QqVSKl19+OQ4ePBgzMzNZj3PRDA8Pz/96enq66nUNDQ3R0dERHR0dMTMzE4cPH45yuRyvvPJKNDY2zh/f+9nPfhZr166Na665Jm655Za6/2nESifncp4Hci7nABChJF+wQ4cOxY9+9KOYnJzMepTMHDlyJC655JIlr2tqaoqtW7fG1q1bY2pqav743tDQUKxduza6u7vj2LFjsXPnTg+qMibncp4Hci7nABARsSrrAeBMlUpl/tfL5YVfYKnknDyQcwCWKz9JvkBbtmyJX/u1X8vl8bzTp09HRMTmzZvPa4+ZmZn5V0sdGxubP55XKBSivb091q5dG9dee20UCoVajs55kHM5zwM5l3MAiFCSL1ixWMzl210999xz8dhjj0VERHNzc9XrKpXK/Au9jIyMxNzcXHR0dMTVV18dmzdvjqamprjyyiujr68vduzY4YVe6oSc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4403zt9+/PHH41Of+tSi69ra2uLVV19dcN9nP/vZ+OY3v7no2ttuuy0efvjhBffddNNNUS6XF137la98Je6+++7526+99lp85CMfWXRdRMQzzzwTW7dunb/9yCOPxJe//OVF123fvj2efPLJBffdc8898fTTTy+69t57740HH3xwwX3VfkPk61//etxyyy3zt5966qn4xCc+UdXad3/xfOlLX4qvfe1ri667+eab49FHH11w36233hoHDhx4zzXvfCGeOHHirPv37NlT1bw/+MEPYseOHfO3v/GNb8TnPve5RdcVCoX46U9/uuC++++/P5544olF1951113x1a9+dcF9O3fujImJiUXXPvTQQ3H77bfP33722WfjzjvvXHRdRMQrr7wS69evn7+9d+/e2Lt376LrbrjhBteIDK8R7+R8aGjorK9h14j3v0a844tf/GLcd99987ddI86tHq4Rc3NzVefQNcLjiDMth2vEmdfzm266yTXC44gFlsM1YnBwsKp5aimVklyNw4cPn/O+av4SxsfHF9yuVCpV/+VNT08vuD01NVXV2jO/ON9x9OjRqtaOjo6edV+5XK5q7eTk5ILbMzMzVX+us7OzC25PTExUtXbDhg1n3TcyMlLV2nO9vUC18546deqs2+f7RTE2NlbV2pGRkbPuGx4ermrt3Nzcgtuzs7NVzzszM7Pg9uTk5Hl/rqOjo1WtPXr06Fn3HTx4MI4fP77o2qmpqQW3p6enq563UqksuD0+Pl7V2nN9o8014mxpXyPm5ubOus81orprxLsfOLpGnFs9XCMiqs+ha4THEWdaTteIubm5c5Ym14izeRxRv9eIiyW1klwoFN7397u6us55X09Pz6J7t7e3L7jd0NBQ1bqIiObm5gW3165dW9Xatra2s+7btGlTVWs7OjrOum+xv593tLa2Lrjd1NRU9efa2Ni44HZbW1tVa7u7u8+6r7Ozs6q15wp9tfO2tLScdbvateeao5q1nZ2dZ93X3d39vu8lODQ0FHNzc7Fq1cKn9Dc2NlY9b1PTwi+91tbWqtaeKzcdHR1Vrd20adNZ923btq2q7wCvXbt2we3m5uaqP9eGhoYFt9vb26ta6xqR7TXizJyf+V3iCNeIxa4R73h3Jlwjzq0erhER1efQNcLjiDMth2vEmddz1wiPI95tOVwjzizjd91114Kf8kf8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fvWrC+7buXNnTExMLLr2oYceittvv33+9rPPPht33nnnousiIl555ZVYv379/O29e/fG3r17F113ww03uEZkeI14J+erVq066/lsrhHvf414xxe/+MUFD0hdI84ty2tEsViMwcHB2Lp1a6xaVd3hOtcIjyPOtByuEWdez//O3/k7rhEeRyywHK4Rg4ODVc0TETEwMFCTH8am8pPkahw+fPic91XzlzA+Pr7gdqVSqfovb3p6esHtqampqtae+cX5jqNHj1a1dnR09Kz7yuVyVWsnJycX3J6Zman6c52dnV1we2Jioqq1GzZsOOu+kZGRqtaOjY2ddV+18546deqs20v5onj3HNWsHRkZOeu+4eHhqtbOzc0tuD07O1v1vDMzMwtuT05OnvfnOjo6WtXaMwv9Ow4ePBjHjx9fdO3U1NSC29PT01XP++7vw42Pj1e19lzfdHONOFva14i5ubmz7nONqO4a8e4Hjq4R51YP14iI6nPoGuFxxJmW0zVibm7unKXJNeJsHkfU7zXiYkmtJBcKhff9/a6urnPe19PTs+je7e3tC243NDRUtS4iorm5ecHttWvXVrW2ra3trPs2bdpU1dqOjo6z7lvs7+cdra2tC243NTVV/bm++6X+29raqlp7rlcn7+zsrGrtuUJf7bwtLS1n3a527bnmqGZtZ2fnWfd1d3ef8x/pd5z5HdkzNTY2Vj1vU9PCL73W1taq1p4rNx0dHVWt3bRp01n3bdu2rarvAK9du3bB7ebm5qo/14aGhgW329vbq1rrGpHtNeL9fpLsGvH+14h3vDsTrhHnVg/XiIjqc+ga4XHEmZbDNeLM67lrhMcR77YcrhFnlvG77rprwU/5I355auBcP4C9EKkcty4UCqmcDYd68M7xvJ6enkWfIwHLlZyTB3JOHsg5K92ZPbRWx629ujUAAAAklGQAAABIKMkAAACQUJIBAAAgoSQDAABAIpW3gLrsssvS2Bbqwvbt22PDhg3nfPl6WCnknDyQc/JAzmHpUnkLqFq99DYAAAC8F28BBQAAAClSkgEAACChJAMAAEAilRfu+vSnPx3f/va309gaMnfPPffEyMhIdHZ2xqOPPpr1OJAKOScP5Jw8kHNYulRK8t/+7d+msS3UhaeffjoGBwejp6cn61EgNXJOHsg5eSDnsHSOWwMAAEBCSQYAAICEkgwAAAAJ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\n",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 482,
       "width": 484
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f,ax=plt.subplots(1,figsize=(6,6))\n",
    "\n",
    "f=plt.gca()\n",
    "i=0\n",
    "for k,y in enumerate(range(3,n_rows*6,6)):\n",
    "    for l,x in enumerate(range(3,n_columns*6,6)):\n",
    "        if policy[k,l]!=-1:\n",
    "            vec=acl[policy[k,l]]*2       \n",
    "            if i!=n_rows*n_columns:  \n",
    "                plt.arrow(x-vec[1]/2, y-vec[0]/2, vec[1], vec[0], fc=\"k\", ec=\"k\",head_width=0.6, head_length=0.8, width=0.01 ,alpha=0.5)\n",
    "       \n",
    "        else:\n",
    "            rect=patches.Rectangle((x-3,y-3), 6,6,color='green',alpha=0.2)\n",
    "            ax.add_patch(rect)\n",
    "        i=i+1\n",
    "        \n",
    "plt.xticks(np.arange(0, n_rows*n_columns, step=6))\n",
    "plt.yticks(np.arange(0, n_rows*n_columns, step=6))\n",
    "plt.xlim(0,6*n_columns)\n",
    "plt.ylim(0,6*n_rows)\n",
    "plt.grid(lw=1,color='k',ls='--')  \n",
    "\n",
    "f.axes.xaxis.set_ticklabels([])\n",
    "f.axes.yaxis.set_ticklabels([])\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Where to go from here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to know more about Reinforcement Learning, have a look at the [book](http://incompleteideas.net/book/bookdraft2017nov5.pdf) of Sutton and Barto."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "3d72d4ad20ba41e28f2e1d3456d01f39": {
      "model_module": "ipycanvas",
      "model_module_version": "^0.13",
      "model_name": "CanvasManagerModel",
      "state": {
       "_model_module_version": "^0.13",
       "_view_module": null,
       "_view_module_version": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
